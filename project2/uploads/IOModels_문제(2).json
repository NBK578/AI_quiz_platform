[
    {
        "page": null,
        "유형": "객관식",
        "question_data": {
            "question": "다음 중 I/O 모델에 속하지 않는 것은?",
            "choices": [
                "A. Blocking I/O",
                "B. Non-blocking I/O",
                "C. Signal Driven I/O Model",
                "D. Blocking Multiplexing"
            ],
            "answer": "D",
            "explanation": "Blocking Multiplexing은 다양한 I/O 모델 중 하나이지 않습니다. 나머지 Blocking I/O, Non-blocking I/O, Signal Driven I/O Model은 모두 I/O 모델에 속합니다."
        }
    },
    {
        "page": 2,
        "유형": "빈칸 채우기",
        "question_data": {
            "question": "I/O 작동에는 어떤 두 단계가 있나요?",
            "answer": "데이터가 준비될 때까지 기다리는 단계와 준비된 데이터를 커널에서 사용자 프로세스로 복사하는 단계",
            "explanation": "데이터를 받는 과정은 두 단계로 이루어집니다. 첫째, 데이터가 준비될 때까지 기다리고 둘째, 그 데이터를 커널에서 사용자의 프로세스로 복사합니다."
        }
    },
    {
        "page": 3,
        "유형": "빈칸 채우기",
        "question_data": {
            "question": "시스템 요청이 완료될 때까지 작업이 수행할 수 있는 다른 행동들은 무엇인가요?",
            "answer": "데이터의 무결성을 테스트하거나, 다른 요청을 시작하고 추적하거나, 여러 소켓 연결을 기다리거나, 일부 CPU 집중적인 계산을 처리하는 것",
            "explanation": "시스템 요청이 종료될 때까지 다른 작업을 실행하는 것은 리소스 활용에 있어서 효율적입니다. 일부 가능한 행동으로는 데이터의 무결성 검사, 다른 요청 시작 및 추적, 여러 소켓 연결 대기, CPU 집중적 계산 처리 등이 있습니다."
        }
    },
    {
        "page": 1,
        "유형": "OX문제",
        "question_data": {
            "question": "Blocking I/O Model에서는 데이터가 준비될 때까지 기다리는 단계와 준비된 데이터를 커널에서 사용자 프로세스로 복사하는 단계의 2단계가 존재한다.",
            "choices": [
                "O",
                "X"
            ],
            "answer": "O",
            "explanation": "문서에 따르면, Blocking I/O Model에서는 액세스하려는 데이터가 준비될 때까지 기다리고, 데이터가 준비되면 사용자 프로세스로 복사하여 활용합니다."
        }
    },
    {
        "page": 1,
        "유형": "OX문제",
        "question_data": {
            "question": "패킷이 네트워크로부터 도착하지 않으면 바로 커널 버퍼로 복사된다.",
            "choices": [
                "O",
                "X"
            ],
            "answer": "X",
            "explanation": "문서에 따르면, 패킷이 네트워크에서 도착하면 그 후에야 커널 버퍼로 복사되기 시작합니다."
        }
    },
    {
        "page": 1,
        "유형": "주관식",
        "question_data": {
            "question": "입력 동작에 어떤 두 단계가 있는지 기술하시오.",
            "answer": "데이터가 준비될 때까지 기다리는 단계, 준비된 데이터를 커널에서 사용자 프로세스로 복사하는 단계",
            "explanation": ""
        }
    },
    {
        "page": 1,
        "유형": "주관식",
        "question_data": {
            "question": "블록킹 I/O 모델에서 언제 블록이 발생하는지 예시를 들어 설명하시오.",
            "answer": "데이터가 아직 도착하지 않았을 때, 내부 버퍼가 가득 차 있고 더 많은 데이터를 전송하려는 요청이 있을 때, accept()와 connect() 시스템 호출에서 대기 연결이 없을 때",
            "explanation": ""
        }
    },
    {
        "page": null,
        "유형": "서술형",
        "question_data": {
            "question": "입력 동작에 대해 설명하시오.",
            "answer": "입력 동작에는 두 가지 단계가 존재합니다. 첫째, 데이터가 준비될 때까지 기다리는 단계입니다. 이때, 네트워크 소켓의 경우 패킷이 네트워크로부터 도착하여 커널 버퍼로 복사됩니다. 둘째, 준비된 데이터를 커널에서 사용자 프로세스로 복사하는 단계입니다. 이때도 네트워크 소켓의 경우 커널 버퍼로부터 응용 프로그램의 버퍼로 복사됩니다.",
            "explanation": null
        }
    },
    {
        "page": null,
        "유형": "서술형",
        "question_data": {
            "question": "다음 I/O 모델들에 대해 설명하시오: Blocking I/O, Non-blocking I/O, I/O multiplexing, Signal Driven I/O Model, Asynchronous I/O.",
            "answer": "1) Blocking I/O Model: 데이터가 준비될 때까지 프로세스가 대기하며, 데이터가 준비되면 커널에서 사용자로 데이터를 복사한다. 2) Non-blocking I/O Model: 데이터가 준비되지 않았을 때, 프로세스는 계속해서 recvfrom을 호출하며 OK return을 기다린다. 3) I/O multiplexing Model: 여러 소켓 중 하나가 읽을 수 있게 될 때까지 프로세스가 select의 호출에서 대기한다. 4) Signal-Driven I/O Model: SIGIO 시그널 핸들러를 설치하고, 데이터가 준비되면 시그널 핸들러가 recvfrom를 호출하여 데이터를 애플리케이션 버퍼로 복사한다. 5) Asynchronous I/O Model: aio_read가 호출되면 프로세스는 계속 실행되고, 데이터가 준비되면 aio_read에서 지정된 시그널이 전달된다.",
            "explanation": null
        }
    }
]